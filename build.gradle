plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.30'
}


apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'

archivesBaseName = 'r2z'
group 'eu.ibagroup'
version projectVersion

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
        languageVersion = "1.4"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.4.21"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    compile 'com.squareup.retrofit2:retrofit:2.9.0',
            'com.squareup.retrofit2:converter-gson:2.9.0',
            'com.squareup.retrofit2:converter-scalars:2.4.0',
            'com.google.code.gson:gson:2.8.5',
            'org.junit.jupiter:junit-jupiter-api:5.0.2'

}

test {
    useJUnitPlatform()
}


task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
    required {
        // signing is required if this is a release version and the artifacts are to be published
        !version.toString().endsWith('-SNAPSHOT') && tasks.withType(PublishToMavenRepository).find {
            gradle.taskGraph.hasTask it
        }
    }
    sign publishing.publications
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'eu.ibagroup'
            artifactId 'r2z'
            version projectVersion

            from components.java


            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }
        }
    }
    repositories {
        maven {
            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}
//какая-то неимоверная дичь
def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Library that allows to perform http requests to IBM z/OSMF REST API with the help of Retorfit2.'
            name 'Retrofit2-ZOSMF-Library'
            url 'https://github.com/for-mainframe/Retrofit2-ZOSMF-Library'

            issueManagement {
                system 'GitHub'
                url 'https://github.com/for-mainframe/Retrofit2-ZOSMF-Library/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/for-mainframe/Retrofit2-ZOSMF-Library/blob/main/License'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/for-mainframe/Retrofit2-ZOSMF-Library'
                connection 'scm:git:git://github.com/for-mainframe/Retrofit2-ZOSMF-Library.git'
                developerConnection 'scm:git:git@github.com:for-mainframe/Retrofit2-ZOSMF-Library.git'
            }
            developers {
                developer {
                    id 'formainframe'
                    name 'For Mainframe'
                    email 'formainframe@ibagroup.eu'
                }
            }
        }
    }
}


model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}